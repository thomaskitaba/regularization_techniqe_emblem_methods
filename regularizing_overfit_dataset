#!/usr/bin/python3
# ===============================================
# ðŸ“Œ ML Assignment: Regularization with Bagging & Boosting
# ===============================================

import numpy as np
import matplotlib.pyplot as plt
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import BaggingRegressor, GradientBoostingRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error

# -----------------------------
# 1. Generate Synthetic Dataset
# -----------------------------
np.random.seed(42)
X = np.sort(5 * np.random.rand(80, 1), axis=0)
y = np.sin(X).ravel() + np.random.normal(0, 0.2, X.shape[0])  # noisy sine function

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3)
# -----------------------------
# 2. Overfitted Decision Tree
# -----------------------------
tree = DecisionTreeRegressor(max_depth=None)  # Fully grown = overfit
tree.fit(X_train, y_train)

y_pred_train = tree.predict(X_train)
y_pred_test = tree.predict(X_test)

print("ðŸ”´ Overfitted Tree")
print("Train MSE:", mean_squared_error(y_train, y_pred_train))
print("Test MSE :", mean_squared_error(y_test, y_pred_test))

plt.figure(figsize=(10, 4))
plt.scatter(X, y, color="gray", label="True Data")
plt.scatter(X_test, y_pred_test, color="red", label="Overfit Tree Prediction")
plt.title("Overfitted Decision Tree")
plt.legend()
plt.show()

# -----------------------------
# 3. Regularization: Bagging
# -----------------------------
bag = BaggingRegressor(estimator=DecisionTreeRegressor(), n_estimators=50)
bag.fit(X_train, y_train)

y_bag_pred = bag.predict(X_test)
y_pred_train = bag.predict(X_train)


print("\nðŸŸ¢ Bagging (Regularization via Averaging)")
print("Test MSE :", mean_squared_error(y_test, y_bag_pred))
print("Train MSE:", mean_squared_error(y_train, y_pred_train))

plt.figure(figsize=(10, 4))
plt.scatter(X, y, color="gray", label="True Data")
plt.scatter(X_test, y_bag_pred, color="green", label="Bagging Prediction")
plt.title("Bagging Prediction")
plt.legend()
plt.show()

# -----------------------------
# 4. Regularization: Boosting
# -----------------------------
boost = GradientBoostingRegressor(n_estimators=100, learning_rate=0.1, max_depth=2)
boost.fit(X_train, y_train)

y_boost_pred_test = boost.predict(X_test)
y_boost_pred_train = boost.predict(X_train)

print("\nðŸ”µ Boosting (Regularization via Sequential Learning)")
print("Train MSE:", mean_squared_error(y_train, y_boost_pred_train))
print("Test MSE :", mean_squared_error(y_test, y_boost_pred_test))

plt.figure(figsize=(10, 4))
plt.scatter(X, y, color="gray", label="True Data")
plt.scatter(X_test, y_boost_pred_test, color="blue", label="Boosting Prediction")
plt.title("Boosting Prediction")
plt.legend()
plt.show()


# -----------------------------
# 5. Comparison Summary
# -----------------------------
print("\nðŸ“Š Summary of Test MSEs:")
print(f"Overfitted Tree Test MSE: {mean_squared_error(y_test, y_pred_test):.4f}")
print(f"Bagging Test MSE        : {mean_squared_error(y_test, y_bag_pred):.4f}")
print(f"Boosting Test MSE       : {mean_squared_error(y_test, y_boost_pred_test):.4f}")
